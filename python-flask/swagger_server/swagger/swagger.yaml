---
swagger: "2.0"
info:
  description: "NGSI V2 API"
  version: "v2"
  title: "ngsi-v2"
  license:
    name: "MIT"
    url: "http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT"
host: "https://api.s.orchestracities.com/context/v2/"
basePath: "/v2"
schemes:
- "https"
produces:
- "application/json"
security:
- Bearer: []
paths:
  /:
    get:
      tags:
      - "API Entry Point"
      description: "This resource does not have any attributes. Instead it offers\
        \ the initial API affordances in the form of the links in the JSON body. It\
        \ is recommended to follow the “url” link values, [Link](https://tools.ietf.org/html/rfc5988)\
        \ or Location headers where applicable to retrieve resources. Instead of constructing\
        \ your own URLs, to keep your client decoupled from implementation details."
      operationId: "retrieve_api_resources"
      consumes: []
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/APIEntryPoint"
          examples:
            application/json:
              entities_url: "/v2/entities"
              types_url: "/v2/types"
              subscriptions_url: "/v2/subscriptions"
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "swagger_server.controllers.api_entry_point_controller"
  /entities:
    get:
      tags:
      - "Entities"
      description: "Retrieves a list of entities that match different criteria by\
        \ id, type, pattern matching (either id or type)\nand/or those which match\
        \ a query or geographical query (see [Simple Query Language](#simple_query_language)\
        \ and \n[Geographical Queries](#geographical_queries)). A given entity has\
        \ to match all the criteria to be retrieved\n(i.e., the criteria is combined\
        \ in a logical AND way). Note that pattern matching query parameters are incompatible\n\
        (i.e. mutually exclusive) with their corresponding exact matching parameters,\
        \ i.e. `idPattern` with `id` and\n`typePattern` with `type`.\nThe response\
        \ payload is an array containing one object per matching entity. Each entity\
        \ follows\nthe JSON entity Representation format (described in \"JSON Entity\
        \ Representation\" section).\n\nResponse code:\n* Successful operation uses\
        \ 200 OK\n* Errors use a non-2xx and (optionally) an error payload. See subsection\
        \ on \"Error Responses\" for\n  more details."
      operationId: "list_entities"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "query"
        description: "A comma-separated list of elements.\nRetrieve entities whose\
          \ ID matches one of the elements in the list.\nIncompatible with idPattern."
        required: false
        type: "string"
      - name: "type"
        in: "query"
        description: "comma-separated list of elements.\nRetrieve entities whose type\
          \ matches one of the elements in the list.\nIncompatible with `typePattern`."
        required: false
        type: "string"
      - name: "idPattern"
        in: "query"
        description: "A correctly formated regular expression.\nRetrieve entities\
          \ whose ID matches the regular expression. Incompatible with id."
        required: false
        type: "string"
      - name: "typePattern"
        in: "query"
        description: "A correctly formated regular expression.\nRetrieve entities\
          \ whose type matches the regular expression. Incompatible with `type`."
        required: false
        type: "string"
      - name: "q"
        in: "query"
        description: "A query expression, composed of a list of statements\nseparated\
          \ by `;`, i.e., q=statement;statements;statement.\nSee [Simple Query Language\
          \ specification](#simple_query_language)."
        required: false
        type: "string"
      - name: "mq"
        in: "query"
        description: "A query expression for attribute metadata,\ncomposed of a list\
          \ of statements separated by `;`, i.e., mq=statement1;statement2;statement3.\n\
          See [Simple Query Language specification](#simple_query_language)."
        required: false
        type: "string"
      - name: "georel"
        in: "query"
        description: "Spatial relationship between matching entities and a\nreference\
          \ shape. See [Geographical Queries](#geographical_queries)."
        required: false
        type: "string"
      - name: "geometry"
        in: "query"
        description: "Geografical area to which the query is restricted.\nSee [Geographical\
          \ Queries](#geographical_queries)."
        required: false
        type: "string"
      - name: "coords"
        in: "query"
        description: "List of latitude-longitude\npairs of coordinates separated by\
          \ ';'. See [Geographical Queries](#geographical_queries)."
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        description: "Limits the number of entities to be retrieved"
        required: false
        type: "number"
        format: "double"
      - name: "offset"
        in: "query"
        description: "Establishes the offset from where entities are retrieved"
        required: false
        type: "number"
        format: "double"
      - name: "attrs"
        in: "query"
        description: "Comma-separated list of attribute names whose data\nare to be\
          \ included in the response.\nThe attributes are retrieved in the order specified\
          \ by this parameter. If this parameter is\nnot included, the attributes\
          \ are retrieved in arbitrary order."
        required: false
        type: "string"
      - name: "orderBy"
        in: "query"
        description: "Criteria for ordering results.\nSee \"Ordering Results\" section\
          \ for details."
        required: false
        type: "string"
      - name: "options"
        in: "query"
        description: "Options dictionary"
        required: false
        type: "string"
        enum:
        - "count"
        - "keyValues"
        - "values"
        - "unique"
      responses:
        200:
          description: "JSON Entity Representation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Entity"
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "swagger_server.controllers.entities_controller"
    post:
      tags:
      - "Entities"
      description: "The payload is an object representing the entity to be created.\
        \ The object follows\nthe JSON entity Representation format (described in\
        \ a \"JSON Entity Representation\" section).\nResponse:\n* Successful operation\
        \ uses 201 Created. Reponse includes a `Location` header with the URL of the\n\
        \  created entity.\n* Errors use a non-2xx and (optionally) an error payload.\
        \ See subsection on \"Error Responses\" for\n  more details."
      operationId: "create_entity"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "options"
        in: "query"
        description: "Options dictionary"
        required: false
        type: "string"
        enum:
        - "keyValues"
      - in: "body"
        name: "body"
        description: "JSON Entity Representation"
        required: true
        schema:
          $ref: "#/definitions/Entity"
      responses:
        200:
          description: ""
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "swagger_server.controllers.entities_controller"
  /entities/{entityId}:
    get:
      tags:
      - "Entities"
      description: "The response is an object representing the entity identified by\
        \ the ID. The object follows\nthe JSON entity Representation format (described\
        \ in \"JSON Entity Representation\" section).\nThis operation must return\
        \ one entity element only, but there may be more than one entity with the\n\
        same ID (e.g. entities with same ID but different types).\nIn such case, an\
        \ error message is returned, with the HTTP status code set to 409 Conflict.\n\
        Response:\n* Successful operation uses 200 OK\n* Errors use a non-2xx and\
        \ (optionally) an error payload. See subsection on \"Error Responses\" for\
        \ more details."
      operationId: "retrieve_entity"
      produces:
      - "application/json"
      parameters:
      - name: "entityId"
        in: "path"
        description: "Id of the entity to be retrieved"
        required: true
        type: "string"
      - name: "type"
        in: "query"
        description: "Entity type, to avoid ambiguity in case there are several\n\
          entities with the same entity id."
        required: false
        type: "string"
      - name: "attrs"
        in: "query"
        description: "Comma-separated list of attribute names whose\ndata must be\
          \ included in the response. The attributes are retrieved in the order specified\
          \ by\nthis parameter.\nIf this parameter is not included, the attributes\
          \ are retrieved in arbitrary order, and all\nthe attributes of the entity\
          \ are included in the response."
        required: false
        type: "string"
      - name: "options"
        in: "query"
        description: "Options dictionary"
        required: false
        type: "string"
        enum:
        - "keyValues"
        - "values"
        - "unique"
      responses:
        200:
          description: "JSON Entity Representation"
          schema:
            $ref: "#/definitions/Entity"
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-swagger-router-controller: "swagger_server.controllers.entities_controller"
    delete:
      tags:
      - "Entities"
      description: "Delete the entity.\nResponse:\n* Successful operation uses 204\
        \ No Content\n* Errors use a non-2xx and (optionally) an error payload. See\
        \ subsection on \"Error Responses\" for\n  more details."
      operationId: "remove_entity"
      produces:
      - "application/json"
      parameters:
      - name: "entityId"
        in: "path"
        description: "Id of the entity to be deleted"
        required: true
        type: "string"
      - name: "type"
        in: "query"
        description: "Entity type, to avoid ambiguity in the case there are several\n\
          entities with the same entity id."
        required: false
        type: "string"
      responses:
        200:
          description: ""
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-swagger-router-controller: "swagger_server.controllers.entities_controller"
  /entities/{entityId}/attrs:
    get:
      tags:
      - "Entities"
      description: "This request is similar to retreiving the whole entity, however\
        \ this one omits the `id` and `type`\nfields.\nJust like the general request\
        \ of getting an entire entity, this operation must return only one\nentity\
        \ element. If more than one entity with the same ID is found (e.g. entities\
        \ with\nsame ID but different type), an error message is returned, with the\
        \ HTTP status code set to\n409 Conflict.\nResponse:\n* Successful operation\
        \ uses 200 OK\n* Errors use a non-2xx and (optionally) an error payload. See\
        \ subsection on \"Error Responses\" for\n  more details."
      operationId: "retrieve_entity_attributes"
      produces:
      - "application/json"
      parameters:
      - name: "entityId"
        in: "path"
        description: "Id of the entity to be retrieved"
        required: true
        type: "string"
      - name: "type"
        in: "query"
        description: "Entity type, to avoid ambiguity in the case there are several\n\
          entities with the same entity id."
        required: false
        type: "string"
      - name: "attrs"
        in: "query"
        description: "Comma-separated list of attribute names whose\ndata are to be\
          \ included in the response. The attributes are retrieved in the order specified\n\
          by this parameter.\nIf this parameter is not included, the attributes are\
          \ retrieved in arbitrary order, and all\nthe attributes of the entity are\
          \ included in the response."
        required: false
        type: "string"
      - name: "options"
        in: "query"
        description: "Options dictionary"
        required: false
        type: "string"
        enum:
        - "keyValues"
        - "values"
        - "unique"
      responses:
        200:
          description: "JSON Attribute Representation"
          schema:
            $ref: "#/definitions/Attribute"
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "swagger_server.controllers.entities_controller"
    post:
      tags:
      - "Entities"
      description: "The request payload is an object representing the attributes to\
        \ append or update. The object follows\nthe JSON entity Representation format\
        \ (described in \"JSON Entity Representation\" section), except\nthat `id`\
        \ and `type` are not allowed.\nThe entity attributes are updated with the\
        \ ones in the payload, depending on\nwhether the `append` operation option\
        \ is used or not.\n* If `append` is not used: the entity attributes are updated\
        \ (if they previously exist) or appended\n  (if they don't previously exist)\
        \ with the ones in the payload.\n* If `append` is used (i.e. strict append\
        \ semantics): all the attributes in the payload not\n  previously existing\
        \ in the entity are appended. In addition to that, in case some of the\n \
        \ attributes in the payload already exist in the entity, an error is returned.\n\
        Response:\n* Successful operation uses 204 No Content\n* Errors use a non-2xx\
        \ and (optionally) an error payload. See subsection on \"Error Responses\"\
        \ for\n  more details."
      operationId: "update_or_append_entity_attributes"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "entityId"
        in: "path"
        description: "Entity id to be updated"
        required: true
        type: "string"
      - name: "type"
        in: "query"
        description: "Entity type, to avoid ambiguity in case there are several\n\
          entities with the same entity id."
        required: false
        type: "string"
      - name: "options"
        in: "query"
        description: "Operations options"
        required: false
        type: "string"
        enum:
        - "append"
        - "keyValues"
      - in: "body"
        name: "body"
        description: "JSON Attribute Representation"
        required: true
        schema:
          $ref: "#/definitions/Attribute"
      responses:
        200:
          description: ""
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "swagger_server.controllers.entities_controller"
    put:
      tags:
      - "Entities"
      description: "The request payload is an object representing the new entity attributes.\
        \ The object follows\nthe JSON entity Representation format (described in\
        \ a \"JSON Entity Representation\" above), except\nthat `id` and `type` are\
        \ not allowed.\nThe attributes previously existing in the entity are removed\
        \ and replaced by the ones in the\nrequest.\nResponse:\n* Successful operation\
        \ uses 204 No Content\n* Errors use a non-2xx and (optionally) an error payload.\
        \ See subsection on \"Error Responses\" for\n  more details."
      operationId: "replace_all_entity_attributes"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "entityId"
        in: "path"
        description: "Id of the entity in question."
        required: true
        type: "string"
      - name: "type"
        in: "query"
        description: "Entity type, to avoid ambiguity in the case there are several\n\
          entities with the same entity id."
        required: false
        type: "string"
      - name: "options"
        in: "query"
        description: "Operations options"
        required: false
        type: "string"
        enum:
        - "keyValues"
      - in: "body"
        name: "body"
        description: "JSON Attribute Representation"
        required: true
        schema:
          $ref: "#/definitions/Attribute"
      responses:
        200:
          description: ""
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "swagger_server.controllers.entities_controller"
    patch:
      tags:
      - "Entities"
      description: "The request payload is an object representing the attributes to\
        \ update. The object follows\nthe JSON entity Representation format (described\
        \ in \"JSON Entity Representation\" section), except\nthat `id` and `type`\
        \ are not allowed.\nThe entity attributes are updated with the ones in the\
        \ payload. In addition to that, if one or more\nattributes in the payload\
        \ doesn't exist in the entity, an error is returned.\nResponse:\n* Successful\
        \ operation uses 204 No Content\n* Errors use a non-2xx and (optionally) an\
        \ error payload. See subsection on \"Error Responses\" for\n  more details."
      operationId: "update_existing_entity_attributes"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "entityId"
        in: "path"
        description: "Id of the entity to be updated"
        required: true
        type: "string"
      - name: "type"
        in: "query"
        description: "Entity type, to avoid ambiguity in case there are several\n\
          entities with the same entity id."
        required: false
        type: "string"
      - name: "options"
        in: "query"
        description: "Operations options"
        required: false
        type: "string"
        enum:
        - "keyValues"
      - in: "body"
        name: "body"
        description: "JSON Attribute Representation"
        required: true
        schema:
          $ref: "#/definitions/Attribute"
      responses:
        200:
          description: ""
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "swagger_server.controllers.entities_controller"
  /entities/{entityId}/attrs/{attrName}:
    get:
      tags:
      - "Attributes"
      description: "Returns a JSON object with the attribute data of the attribute.\
        \ The object follows the JSON\nRepresentation for attributes (described in\
        \ \"JSON Attribute Representation\" section).\nResponse:\n* Successful operation\
        \ uses 200 OK.\n* Errors use a non-2xx and (optionally) an error payload.\
        \ See subsection on \"Error Responses\" for\n  more details."
      operationId: "get_attribute_data"
      produces:
      - "application/json"
      parameters:
      - name: "entityId"
        in: "path"
        description: "Id of the entity"
        required: true
        type: "string"
      - name: "type"
        in: "query"
        description: "Entity type, to avoid ambiguity in the case there are several\n\
          entities with the same entity id."
        required: false
        type: "string"
      - name: "attrName"
        in: "path"
        description: "Name of the attribute to be retrieved."
        required: true
        type: "string"
      responses:
        200:
          description: "JSON Entity Representation"
          schema:
            $ref: "#/definitions/Entity"
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "swagger_server.controllers.attributes_controller"
    put:
      tags:
      - "Attributes"
      description: "The request payload is an object representing the new attribute\
        \ data. Previous attribute data\nis replaced by the one in the request. The\
        \ object follows the JSON Representation for attributes\n(described in \"\
        JSON Attribute Representation\" section).\nResponse:\n* Successful operation\
        \ uses 204 No Content\n* Errors use a non-2xx and (optionally) an error payload.\
        \ See subsection on \"Error Responses\" for\n  more details."
      operationId: "update_attribute_data"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "entityId"
        in: "path"
        description: "Id of the entity to update"
        required: true
        type: "string"
      - name: "type"
        in: "query"
        description: "Entity type, to avoid ambiguity in case there are several\n\
          entities with the same entity id."
        required: false
        type: "string"
      - name: "attrName"
        in: "path"
        description: "Attribute name"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: true
        schema:
          type: "object"
          title: "Entity"
      responses:
        200:
          description: ""
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "swagger_server.controllers.attributes_controller"
    delete:
      tags:
      - "Attributes"
      description: "Removes an entity attribute.\nResponse:\n* Successful operation\
        \ uses 204 No Content\n* Errors use a non-2xx and (optionally) an error payload.\
        \ See subsection on \"Error Responses\" for\n  more details."
      operationId: "remove_a_single_attribute"
      produces:
      - "application/json"
      parameters:
      - name: "entityId"
        in: "path"
        description: "Id of the entity."
        required: true
        type: "string"
      - name: "type"
        in: "query"
        description: "Entity type, to avoid ambiguity in the case there are several\n\
          entities with the same entity id."
        required: false
        type: "string"
      - name: "attrName"
        in: "path"
        description: "Attribute name."
        required: true
        type: "string"
      responses:
        200:
          description: ""
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "swagger_server.controllers.attributes_controller"
  /entities/{entityId}/attrs/{attrName}/value:
    get:
      tags:
      - "Attribute Value"
      description: "This operation returns the `value` property with the value of\
        \ the attribute.\n* If attribute value is JSON Array or Object:\n  * If `Accept`\
        \ header can be expanded to `application/json` or `text/plain` return the\
        \ value as a JSON with a\n    response type of application/json or text/plain\
        \ (whichever is the first in `Accept` header or\n    `application/json` in\
        \ the case of `Accept: */*`).\n  * Else return a HTTP error \"406 Not Acceptable:\
        \ accepted MIME types: application/json, text/plain\"\n* If attribute value\
        \ is a string, number, null or boolean:\n  * If `Accept` header can be expanded\
        \ to text/plain return the value as text. In case of a string, citation\n\
        \    marks are used at the begining and end.\n  * Else return a HTTP error\
        \ \"406 Not Acceptable: accepted MIME types: text/plain\"\nResponse:\n* Successful\
        \ operation uses 200 OK.\n* Errors use a non-2xx and (optionally) an error\
        \ payload. See subsection on \"Error Responses\" for\n  more details."
      operationId: "get_attribute_value"
      produces:
      - "application/json"
      - "plain/text"
      parameters:
      - name: "entityId"
        in: "path"
        description: "Id of the entity in question"
        required: true
        type: "string"
      - name: "type"
        in: "query"
        description: "Entity type, to avoid ambiguity in the case there are several\n\
          entities with the same entity id."
        required: false
        type: "string"
      - name: "attrName"
        in: "path"
        description: "Name of the attribute to be retrieved."
        required: true
        type: "string"
      responses:
        200:
          description: "JSON AttributeValue Representation"
          schema:
            $ref: "#/definitions/AttributeValue"
          examples:
            application/json:
              address: "Ronda de la Comunicacion s/n"
              zipCode": 28050
              city: "Madrid"
              country": "Spain"
            plain/text: 50
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "swagger_server.controllers.attribute_value_controller"
    put:
      tags:
      - "Attribute Value"
      description: "The request payload is the new attribute value.\n* If the request\
        \ payload MIME type is `application/json`, then the value of the attribute\
        \ is set to\n  the JSON object or array coded in the payload (if the payload\
        \ is not a valid JSON document,\n  then an error is returned).\n* If the request\
        \ payload MIME type is `text/plain`, then the following algorithm is applied\
        \ to the\n  payload:\n  * If the payload starts and ends with citation-marks\
        \ (`\"`), the value is taken as a string\n    (the citation marks themselves\
        \ are not considered part of the string)\n  * If `true` or `false`, the value\
        \ is taken as a boolean.\n  * If `null`, the value is taken as null.\n  *\
        \ If these first three tests 'fail', the text is interpreted as a number.\n\
        \  * If not a valid number, then an error is returned and the attribute's\
        \ value is unchanged.\nThe payload MIME type in the request is specified in\
        \ the `Content-Type` HTTP header.\nResponse:\n* Successful operation uses\
        \ 204 No Content\n* Errors use a non-2xx and (optionally) an error payload.\
        \ See subsection on \"Error Responses\" for\n  more details."
      operationId: "update_attribute_value"
      consumes:
      - "application/json"
      - "plain/text"
      produces:
      - "application/json"
      parameters:
      - name: "entityId"
        in: "path"
        description: "Id of the entity to be updated."
        required: true
        type: "string"
      - name: "type"
        in: "query"
        description: "Entity type, to avoid ambiguity in the case there are several\n\
          entities with the same entity id."
        required: false
        type: "string"
      - name: "attrName"
        in: "path"
        description: "Attribute name."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "JSON AttributeValue Representation"
        required: true
        schema:
          $ref: "#/definitions/AttributeValue"
      responses:
        200:
          description: ""
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "swagger_server.controllers.attribute_value_controller"
  /types/:
    get:
      tags:
      - "Types"
      description: "If the `values` option is not in use, this operation returns a\
        \ JSON array with the entity types.\nEach element is a JSON object with information\
        \ about the type:\n* `type` : the entity type name.\n* `attrs` : the set of\
        \ attribute names along with all the entities of such type, represented in\n\
        \  a JSON object whose keys are the attribute names and whose values contain\
        \ information of such\n  attributes (in particular a list of the types used\
        \ by attributes with that name along with all the\n  entities).\n* `count`\
        \ : the number of entities belonging to that type.\nIf the `values` option\
        \ is used, the operation returns a JSON array with a list of entity type\n\
        names as strings.\nResults are ordered by entity `type` in alphabetical order.\n\
        \nResponse code:\n* Successful operation uses 200 OK\n* Errors use a non-2xx\
        \ and (optionally) an error payload. See subsection on \"Error Responses\"\
        \ for\n  more details."
      operationId: "retrieve_entity_types"
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "Limit the number of types to be retrieved."
        required: false
        type: "number"
        format: "double"
      - name: "offset"
        in: "query"
        description: "Skip a number of records."
        required: false
        type: "number"
        format: "double"
      - name: "options"
        in: "query"
        description: "Options dictionary."
        required: false
        type: "string"
        enum:
        - "count"
        - "values"
      responses:
        200:
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/EntityType"
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "swagger_server.controllers.types_controller"
  /types/{entityType}:
    get:
      tags:
      - "Types"
      description: "This operation returns a JSON object with information about the\
        \ type:\n* `attrs` : the set of attribute names along with all the entities\
        \ of such type, represented in\n  a JSON object whose keys are the attribute\
        \ names and whose values contain information of such\n  attributes (in particular\
        \ a list of the types used by attributes with that name along with all the\n\
        \  entities).\n* `count` : the number of entities belonging to that type.\n\
        \nResponse code:\n* Successful operation uses 200 OK\n* Errors use a non-2xx\
        \ and (optionally) an error payload. See subsection on \"Error Responses\"\
        \ for\n  more details."
      operationId: "retrieve_entity_type"
      produces:
      - "application/json"
      parameters:
      - name: "entityType"
        in: "path"
        description: "Entity Type"
        required: true
        type: "string"
      responses:
        200:
          description: "EntityType Representation"
          schema:
            $ref: "#/definitions/EntityType"
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "swagger_server.controllers.types_controller"
  /subscriptions:
    get:
      tags:
      - "Subscriptions"
      description: "Returns a list of all the subscriptions present in the system.\n\
        Response:\n* Successful operation uses 200 OK\n* Errors use a non-2xx and\
        \ (optionally) an error payload. See subsection on \"Error Responses\" for\n\
        \  more details."
      operationId: "retrieve_subscriptions"
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "Limit the number of types to be retrieved"
        required: false
        type: "number"
        format: "double"
      - name: "offset"
        in: "query"
        description: "Skip a number of records"
        required: false
        type: "number"
        format: "double"
      - name: "options"
        in: "query"
        description: "Options dictionary"
        required: false
        type: "string"
        enum:
        - "count"
      responses:
        200:
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Subscription"
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "swagger_server.controllers.subscriptions_controller"
    post:
      tags:
      - "Subscriptions"
      description: "Creates a new subscription.\nThe subscription is represented by\
        \ a JSON object as described at the beginning of this section.\nResponse:\n\
        * Successful operation uses 201 Created\n* Errors use a non-2xx and (optionally)\
        \ an error payload. See subsection on \"Error Responses\" for\n  more details."
      operationId: "create_a_new_subscription"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Subscription"
      responses:
        200:
          description: ""
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "swagger_server.controllers.subscriptions_controller"
  /subscriptions/{subscriptionId}:
    get:
      tags:
      - "Subscriptions"
      description: "The response is the subscription represented by a JSON object\
        \ as described at the beginning of this\nsection.\nResponse:\n* Successful\
        \ operation uses 200 OK\n* Errors use a non-2xx and (optionally) an error\
        \ payload. See subsection on \"Error Responses\" for\n  more details."
      operationId: "retrieve_subscription"
      produces:
      - "application/json"
      parameters:
      - name: "subscriptionId"
        in: "path"
        description: "subscription Id."
        required: true
        type: "string"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/Subscription"
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "swagger_server.controllers.subscriptions_controller"
    delete:
      tags:
      - "Subscriptions"
      description: "Cancels subscription.\nResponse:\n* Successful operation uses\
        \ 204 No Content\n* Errors use a non-2xx and (optionally) an error payload.\
        \ See subsection on \"Error Responses\" for\n  more details."
      operationId: "delete_subscription"
      produces:
      - "application/json"
      parameters:
      - name: "subscriptionId"
        in: "path"
        description: "subscription Id."
        required: true
        type: "string"
      responses:
        200:
          description: ""
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "swagger_server.controllers.subscriptions_controller"
    patch:
      tags:
      - "Subscriptions"
      description: "Only the fields included in the request are updated in the subscription.\n\
        Response:\n* Successful operation uses 204 No Content\n* Errors use a non-2xx\
        \ and (optionally) an error payload. See subsection on \"Error Responses\"\
        \ for\n  more details."
      operationId: "update_subscription"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "subscriptionId"
        in: "path"
        description: "subscription Id."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Subscription"
      responses:
        200:
          description: ""
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "swagger_server.controllers.subscriptions_controller"
  /op/update:
    post:
      tags:
      - "Batch Operations"
      description: "This operation allows to create, update and/or delete several\
        \ entities in a single batch operation.\nThe payload is an object with two\
        \ properties:\n+ `actionType`, to specify the kind of update action to do:\
        \ either APPEND, APPEND_STRICT, UPDATE,\n  DELETE.\n+ `entities`, an array\
        \ of entities, each one specified using the JSON entity Representation format\n\
        \  (described in the section \"JSON Entity Representation\").\nResponse:\n\
        * Successful operation uses 204 No Content.\n* Errors use a non-2xx and (optionally)\
        \ an error payload. See subsection on \"Error Responses\" for\n  more details."
      operationId: "update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "options"
        in: "query"
        description: "Options dictionary"
        required: false
        type: "string"
        enum:
        - "keyValues"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/BatchOperation"
      responses:
        200:
          description: ""
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "swagger_server.controllers.batch_operations_controller"
  /op/query:
    post:
      tags:
      - "Batch Operations"
      description: "The response payload is an Array containing one object per matching\
        \ entity, or an empty array `[]` if \nno entities are found. The entities\
        \ follow the JSON entity Representation format\n(described in the section\
        \ \"JSON Entity Representation\").\nThe payload may contain the following\
        \ elements (all of them optional):\n+ `entities`: a list of entites to search\
        \ for. Each element is represented by a JSON object with the\n  following\
        \ elements:\n    + `id` or `idPattern`: Id or pattern of the affected entities.\
        \ Both cannot be used at the same\n      time, but at least one of them must\
        \ be present.\n    + `type` or `typePattern`: Type or type pattern of the\
        \ entities to search for. Both cannot be used at\n      the same time. If\
        \ omitted, it means \"any entity type\".\n+ `attributes`: a list of attribute\
        \ names to search for. If omitted, it means \"all attributes\".\n\nResponse\
        \ code:\n* Successful operation uses 200 OK\n* Errors use a non-2xx and (optionally)\
        \ an error payload. See subsection on \"Error Responses\" for\n  more details."
      operationId: "query"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "Limit the number of entities to be retrieved."
        required: false
        type: "number"
        format: "double"
      - name: "offset"
        in: "query"
        description: "Skip a number of records."
        required: false
        type: "number"
        format: "double"
      - name: "orderBy"
        in: "query"
        description: "Criteria for ordering results.\nSee \"Ordering Results\" section\
          \ for details."
        required: false
        type: "string"
      - name: "options"
        in: "query"
        description: "Options dictionary"
        required: false
        type: "string"
        enum:
        - "count"
        - "keyValues"
        - "values"
        - "unique"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Query"
      responses:
        200:
          description: ""
          schema:
            type: "array"
            title: "QueryResults"
            items:
              type: "object"
              properties: {}
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "swagger_server.controllers.batch_operations_controller"
securityDefinitions:
  Bearer:
    type: "apiKey"
    name: "Authorization"
    in: "header"
definitions:
  ErrorResponse:
    type: "object"
    required:
    - "error"
    properties:
      error:
        type: "string"
      description:
        type: "string"
    description: "All NGSIv2 server implementations must use the following HTTP response\
      \ codes and error texts. However, the particular text used for description field\
      \ is an implementation specific aspect. Error list (HTTP response code in parenthesis):\
      \ * `ParseError` (400). The incoming JSON payload cannot be parsed. * `BadRequest`\
      \ (400). The incoming request is invalid in this context. * `NotFound` (404).\
      \ The resource (entity, subscription, etc.) referred in the request has not\
      \ been found. * `TooManyResults` (409). There are several results that match\
      \ with the resource identification used in the request. * `ContentLengthRequired`\
      \ (411). Zero/No Content-Length in PUT/POST/PATCH request. * `RequestEntityTooLarge`\
      \ (413). Payload is too large. * `UnsupportedMediaType` (415). Request content\
      \ type is not supported. * `InvalidModification` (422). Some piece of information\
      \ is missing in payload. * `NotSupportedQuery` (422). The implementation does\
      \ not support the query issued. * `NoResourcesAvailable` (413). There are no\
      \ server resources to fulfill the client request. New error codes may be defined\
      \ in new iterations of this specificatio."
    example:
      error: "operation not supported"
      description: "this implementation of NGSI v2 does not support the called operation"
  AttributeValue:
    type: "object"
  Attribute:
    type: "object"
    required:
    - "metadata"
    - "type"
    - "value"
    properties:
      value:
        type: "object"
        properties: {}
      type:
        type: "string"
      metadata:
        type: "object"
        properties: {}
    example:
      value: 35.6
      type: "Number"
      metadata:
        accuracy:
          value: 2
          type: "Number"
  EntityType:
    type: "object"
    example:
      attrs:
        pressure:
          types:
          - "Number"
        humidity:
          types:
          - "percentage"
        emperature:
          types:
          - "urn:phenomenum:temperature"
      count: 7
  Entity:
    type: "object"
    required:
    - "id"
    - "type"
    properties:
      type:
        type: "string"
      id:
        type: "string"
    example:
      type: "Room"
      id: "DC_S1-D41"
      temperature:
        value: 35.6
        type: "Number"
        metadata:
          accuracy:
            value: 2
            type: "Number"
  Subscription:
    type: "object"
    properties:
      id:
        type: "string"
      description:
        type: "string"
      subject:
        type: "object"
        properties: {}
      notification:
        type: "object"
        properties: {}
      expires:
        type: "string"
        format: "date-time"
      status:
        type: "string"
      throttling:
        type: "integer"
        format: "int32"
    example:
      notification: "{}"
      expires: "2000-01-23T04:56:07.000+00:00"
      throttling: 0
      subject: "{}"
      description: "description"
      id: "id"
      status: "status"
  APIEntryPoint:
    required:
    - "entities_url"
    - "subscriptions_url"
    - "types_url"
    properties:
      entities_url:
        type: "string"
        description: "URL which points to the entities resource"
      types_url:
        type: "string"
        description: "URL which points to the types resource"
      subscriptions_url:
        type: "string"
        description: "URL which points to the subscriptions resource"
  BatchOperation:
    required:
    - "actionType"
    - "entities"
    properties:
      actionType:
        type: "string"
        enum:
        - "APPEND"
        - "APPEND_STRICT"
        - "UPDATE"
        - "DELETE"
      entities:
        type: "array"
        items:
          $ref: "#/definitions/Entity"
    title: "BatchOperation"
    example:
      actionType: "APPEND"
      entities:
      - type: "Room"
        id: "DC_S1-D41"
        temperature:
          value: 35.6
          type: "Number"
          metadata:
            accuracy:
              value: 2
              type: "Number"
      - type: "Room"
        id: "DC_S1-D41"
        temperature:
          value: 35.6
          type: "Number"
          metadata:
            accuracy:
              value: 2
              type: "Number"
  QueryPattern:
    properties:
      id:
        type: "string"
      idPattern:
        type: "string"
      type:
        type: "string"
      typePattern:
        type: "string"
    example:
      typePattern: "typePattern"
      id: "id"
      type: "type"
      idPattern: "idPattern"
  Query:
    properties:
      entities:
        type: "array"
        items:
          $ref: "#/definitions/QueryPattern"
      attributes:
        type: "array"
        items:
          type: "string"
    title: "Query"
    example:
      entities:
      - typePattern: "typePattern"
        id: "id"
        type: "type"
        idPattern: "idPattern"
      - typePattern: "typePattern"
        id: "id"
        type: "type"
        idPattern: "idPattern"
      attributes:
      - "attributes"
      - "attributes"
