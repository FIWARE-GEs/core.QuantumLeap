# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Subscription(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, description: str=None, subject: object=None, notification: object=None, expires: datetime=None, status: str=None, throttling: int=None):  # noqa: E501
        """Subscription - a model defined in Swagger

        :param id: The id of this Subscription.  # noqa: E501
        :type id: str
        :param description: The description of this Subscription.  # noqa: E501
        :type description: str
        :param subject: The subject of this Subscription.  # noqa: E501
        :type subject: object
        :param notification: The notification of this Subscription.  # noqa: E501
        :type notification: object
        :param expires: The expires of this Subscription.  # noqa: E501
        :type expires: datetime
        :param status: The status of this Subscription.  # noqa: E501
        :type status: str
        :param throttling: The throttling of this Subscription.  # noqa: E501
        :type throttling: int
        """
        self.swagger_types = {
            'id': str,
            'description': str,
            'subject': object,
            'notification': object,
            'expires': datetime,
            'status': str,
            'throttling': int
        }

        self.attribute_map = {
            'id': 'id',
            'description': 'description',
            'subject': 'subject',
            'notification': 'notification',
            'expires': 'expires',
            'status': 'status',
            'throttling': 'throttling'
        }

        self._id = id
        self._description = description
        self._subject = subject
        self._notification = notification
        self._expires = expires
        self._status = status
        self._throttling = throttling

    @classmethod
    def from_dict(cls, dikt) -> 'Subscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Subscription of this Subscription.  # noqa: E501
        :rtype: Subscription
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Subscription.


        :return: The id of this Subscription.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Subscription.


        :param id: The id of this Subscription.
        :type id: str
        """

        self._id = id

    @property
    def description(self) -> str:
        """Gets the description of this Subscription.


        :return: The description of this Subscription.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Subscription.


        :param description: The description of this Subscription.
        :type description: str
        """

        self._description = description

    @property
    def subject(self) -> object:
        """Gets the subject of this Subscription.


        :return: The subject of this Subscription.
        :rtype: object
        """
        return self._subject

    @subject.setter
    def subject(self, subject: object):
        """Sets the subject of this Subscription.


        :param subject: The subject of this Subscription.
        :type subject: object
        """

        self._subject = subject

    @property
    def notification(self) -> object:
        """Gets the notification of this Subscription.


        :return: The notification of this Subscription.
        :rtype: object
        """
        return self._notification

    @notification.setter
    def notification(self, notification: object):
        """Sets the notification of this Subscription.


        :param notification: The notification of this Subscription.
        :type notification: object
        """

        self._notification = notification

    @property
    def expires(self) -> datetime:
        """Gets the expires of this Subscription.


        :return: The expires of this Subscription.
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires: datetime):
        """Sets the expires of this Subscription.


        :param expires: The expires of this Subscription.
        :type expires: datetime
        """

        self._expires = expires

    @property
    def status(self) -> str:
        """Gets the status of this Subscription.


        :return: The status of this Subscription.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Subscription.


        :param status: The status of this Subscription.
        :type status: str
        """

        self._status = status

    @property
    def throttling(self) -> int:
        """Gets the throttling of this Subscription.


        :return: The throttling of this Subscription.
        :rtype: int
        """
        return self._throttling

    @throttling.setter
    def throttling(self, throttling: int):
        """Sets the throttling of this Subscription.


        :param throttling: The throttling of this Subscription.
        :type throttling: int
        """

        self._throttling = throttling
