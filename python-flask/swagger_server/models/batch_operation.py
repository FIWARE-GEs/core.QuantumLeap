# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.entity import Entity  # noqa: F401,E501
from swagger_server import util


class BatchOperation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, action_type: str=None, entities: List[Entity]=None):  # noqa: E501
        """BatchOperation - a model defined in Swagger

        :param action_type: The action_type of this BatchOperation.  # noqa: E501
        :type action_type: str
        :param entities: The entities of this BatchOperation.  # noqa: E501
        :type entities: List[Entity]
        """
        self.swagger_types = {
            'action_type': str,
            'entities': List[Entity]
        }

        self.attribute_map = {
            'action_type': 'actionType',
            'entities': 'entities'
        }

        self._action_type = action_type
        self._entities = entities

    @classmethod
    def from_dict(cls, dikt) -> 'BatchOperation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BatchOperation of this BatchOperation.  # noqa: E501
        :rtype: BatchOperation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_type(self) -> str:
        """Gets the action_type of this BatchOperation.


        :return: The action_type of this BatchOperation.
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type: str):
        """Sets the action_type of this BatchOperation.


        :param action_type: The action_type of this BatchOperation.
        :type action_type: str
        """
        allowed_values = ["APPEND", "APPEND_STRICT", "UPDATE", "DELETE"]  # noqa: E501
        if action_type not in allowed_values:
            raise ValueError(
                "Invalid value for `action_type` ({0}), must be one of {1}"
                .format(action_type, allowed_values)
            )

        self._action_type = action_type

    @property
    def entities(self) -> List[Entity]:
        """Gets the entities of this BatchOperation.


        :return: The entities of this BatchOperation.
        :rtype: List[Entity]
        """
        return self._entities

    @entities.setter
    def entities(self, entities: List[Entity]):
        """Sets the entities of this BatchOperation.


        :param entities: The entities of this BatchOperation.
        :type entities: List[Entity]
        """
        if entities is None:
            raise ValueError("Invalid value for `entities`, must not be `None`")  # noqa: E501

        self._entities = entities
